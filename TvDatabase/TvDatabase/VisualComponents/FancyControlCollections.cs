using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace TvDatabase.VisualComponents
{
    /// <summary>
    /// Defines a list of FancyButton objects, along with several utility methods
    /// </summary>
    public class FancyButtonCollection : List<FancyButton>
    {
        /// <summary>Holds the list of string captions of the buttons, in corresponding order</summary>
        private List<string> captions;

        /// <summary>Constructs a new FancyButtonCollection object, as well as all the FancyButton objects generated by the caption list.
        /// Note that the color and font settings are the default ones of the FancyButton constructor.</summary>
        /// <param name="parent">the parent control of all the fancy buttons to be created</param>
        /// <param name="captions">the list of string captions that will generate an identical number of buttons, with each one corresponding to a caption</param>
        /// <param name="clickEH">the click event handler for all the fancy buttons to be created</param>
        /// <param name="stackHorizontally">whether the buttons will be stacked horizontally (pass True) or vertically (pass False)</param>
        /// <param name="stackPadding">the padding between each two fancy buttons, in the appropriate dimension</param>
        public FancyButtonCollection(Control parent, IEnumerable<string> captions, EventHandler clickEH, bool stackHorizontally, int stackPadding)
            : base()
        {
            this.captions = new List<string>(captions);
            int n = this.captions.Count, dim = ((stackHorizontally ? parent.Width : parent.Height) - stackPadding * (n - 1)) / n;
            for (int i = 0; i < n; i++)
            {
                Rectangle bounds = stackHorizontally
                    ? new Rectangle(i * (dim + stackPadding), 0, dim, parent.Height)
                    : new Rectangle(0, i * (dim + stackPadding), parent.Width, dim);
                this.Add(new FancyButton(parent, this.captions[i], clickEH, bounds));
            }
        }

        /// <summary>Searches the current list for the FancyButton object with the specified caption, and returns its index.</summary>
        /// <param name="caption">the caption to search for</param>
        /// <returns>the zero-based index of the FancyButton if found, -1 otherwise</returns>
        public int GetIndexOfCaption(string caption)
        {
            return this.captions.IndexOf(caption);
        }

        /// <summary>Searches the current list for the FancyButton object with the caption of the specified FancyButton, and returns its index.</summary>
        /// <param name="button">the FancyButton object whose caption to search for</param>
        /// <returns>the zero-based index of the FancyButton if found, -1 otherwise</returns>
        public int GetIndexOfFancyButton(FancyButton button)
        {
            return this.GetIndexOfCaption(button.Text);
        }

        /// <summary>Searches the current list for the FancyButton object with the specified caption, and returns it.</summary>
        /// <param name="caption">the caption to search for</param>
        /// <returns>the FancyButton object with the specified caption if found, null otherwise</returns>
        public FancyButton GetFancyButtonWithCaption(string caption)
        {
            int index = this.GetIndexOfCaption(caption);
            return index == -1 ? null : this[index];
        }

        /// <summary>Checks whether the FancyButton with the caption of the one given exists.</summary>
        /// <param name="button">the FancyButton object whose caption to search for</param>
        /// <returns>True if found, False otherwise</returns>
        public bool ContainsFancyButton(FancyButton button)
        {
            return this.GetIndexOfCaption(button.Text) != -1;
        }
    }

    /// <summary>
    /// Defines a list of FancyCheckBox objects, along with several utility methods
    /// </summary>
    public class FancyCheckBoxCollection : List<FancyCheckBox>
    {
        /// <summary>Holds the list of string captions of the boxes, in corresponding order</summary>
        private List<string> captions;

        /// <summary>Constructs a new FancyCheckBoxCollection object, as well as all the FancyCheckBox objects generated by the caption list.</summary>
        /// <param name="parent">the parent control of all the boxes to be created</param>
        /// <param name="captions">the list of string captions that will generate an identical number of boxes, with each one corresponding to a caption</param>
        /// <param name="clickEH">the click event handler for all the boxes to be created</param>
        /// <param name="stackHorizontally">whether the boxes will be stacked horizontally (pass True) or vertically (pass False)</param>
        public FancyCheckBoxCollection(Control parent, Rectangle bounds, IEnumerable<string> captions, EventHandler clickEH, bool stackHorizontally)
            : base()
        {
            this.captions = new List<string>(captions);
            int n = this.captions.Count, dim = (stackHorizontally ? bounds.Width : bounds.Height) / n;
            for (int i = 0; i < n; i++)
            {
                Rectangle fcbBounds = stackHorizontally
                    ? new Rectangle(bounds.Left + i * dim, bounds.Top, dim + (i < n - 1 ? 1 : 0), bounds.Height)
                    : new Rectangle(bounds.Left, bounds.Top + i * dim, bounds.Width, dim + (i < n - 1 ? 1 : 0));
                this.Add(new FancyCheckBox(parent, this.captions[i], clickEH, fcbBounds));
            }
        }

        /// <summary>Searches the current list for the FancyCheckBox object with the specified caption, and returns its index.</summary>
        /// <param name="caption">the caption to search for</param>
        /// <returns>the zero-based index of the FancyCheckBox if found, -1 otherwise</returns>
        public int GetIndexOfCaption(string caption)
        {
            return this.captions.IndexOf(caption);
        }

        /// <summary>Searches the current list for the FancyCheckBox object with the caption of the specified FancyCheckBox, and returns its index.</summary>
        /// <param name="button">the FancyCheckBox object whose caption to search for</param>
        /// <returns>the zero-based index of the FancyCheckBox if found, -1 otherwise</returns>
        public int GetIndexOfFancyCheckBox(FancyCheckBox button)
        {
            return this.GetIndexOfCaption(button.Text);
        }

        /// <summary>Searches the current list for the FancyCheckBox object with the specified caption, and returns it.</summary>
        /// <param name="caption">the caption to search for</param>
        /// <returns>the FancyCheckBox object with the specified caption if found, null otherwise</returns>
        public FancyCheckBox GetFancyCheckBoxWithCaption(string caption)
        {
            int index = this.GetIndexOfCaption(caption);
            return index == -1 ? null : this[index];
        }

        /// <summary>Checks whether the FancyCheckBox with the caption of the one given exists.</summary>
        /// <param name="button">the FancyCheckBox object whose caption to search for</param>
        /// <returns>True if found, False otherwise</returns>
        public bool ContainsFancyCheckBox(FancyCheckBox button)
        {
            return this.GetIndexOfCaption(button.Text) != -1;
        }
    }
}
